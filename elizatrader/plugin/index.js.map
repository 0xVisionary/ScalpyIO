{"version":3,"sources":["../../src/plugin/src/services.ts","../../src/plugin/src/actions.ts","../../src/plugin/src/index.ts"],"sourcesContent":["import {\n  Service,\n  ServiceType,\n  IAgentRuntime,\n  elizaLogger,\n  generateObjectDeprecated,\n  ModelClass,\n} from \"@elizaos/core\";\nimport { Scraper, SearchMode, Tweet } from \"agent-twitter-client\";\n\n// Types for Birdeye API responses\nexport interface TokenMetrics {\n  address: string;\n  symbol: string;\n  name: string;\n  extensions?: {\n    website?: string;\n    twitter?: string;\n    telegram?: string;\n    description?: string;\n  };\n  price: number;\n  priceChange24hPercent: number;\n  liquidity: number;\n  mc: number; // Market Cap\n  holder: number;\n  volume24h?: number;\n  trade24h: number;\n  numberMarkets: number;\n  lastTradeUnixTime: number;\n}\n\nexport interface BirdeyeApiResponse {\n  success: boolean;\n  data: TokenMetrics;\n}\n\n// Update search result interfaces to match exact API response\nexport interface SearchResultItem {\n  address: string;\n  symbol: string;\n  name: string;\n  decimals: number;\n  logoURI?: string;\n  volume24h?: number;\n  price?: number;\n}\n\nexport interface TokenSearchResult {\n  type: string;\n  result: SearchResultItem[];\n}\n\nexport interface SearchApiResponse {\n  success: boolean;\n  data: {\n    items: TokenSearchResult[];\n  };\n}\n\n// Declare the BIRDEYE service type\ndeclare module \"@elizaos/core\" {\n  interface ServiceTypeMap {\n    birdeye: Service & BirdeyeService;\n  }\n\n  export enum ServiceType {\n    BIRDEYE = \"birdeye\",\n  }\n}\n\n/**\n * BirdeyeService\n * Service for interacting with Birdeye API\n */\nexport class BirdeyeService extends Service {\n  private apiKey: string | null = null;\n  private runtime: IAgentRuntime | null = null;\n\n  static get serviceType(): ServiceType {\n    //@ts-ignore\n    return \"birdeye\";\n  }\n\n  get serviceType(): ServiceType {\n    //@ts-ignore\n    return \"birdeye\";\n  }\n\n  async initialize(runtime: IAgentRuntime): Promise<void> {\n    this.runtime = runtime;\n    this.apiKey = runtime.getSetting(\"BIRDEYE_API_KEY\");\n\n    if (!this.apiKey) {\n      console.log(\n        \"Missing BIRDEYE_API_KEY in environment variables\",\n        runtime.getSetting(\"BIRDEYE_API_KEY\")\n      );\n      throw new Error(\"Missing BIRDEYE_API_KEY in environment variables\");\n    }\n  }\n\n  /**\n   * Extract coin symbol/address from text\n   * @param text - User input text\n   * @returns Symbol (e.g., \"JUP\") or address\n   */\n  async extractCoinIdentifier(text: string): Promise<string | null> {\n    \n\n    try {\n      const prompt = `You are a cryptocurrency token identifier. Extract the token symbol or address from this message. \nIf you find a token symbol (usually prefixed with $) or a Solana address, return it in JSON format.\nOnly extract ONE token, preferably the first one mentioned.\n\nMessage: \"${text}\"\n\nReturn in this exact JSON format:\n{\n  \"symbol\": \"TOKEN_SYMBOL_WITHOUT_$\", // e.g., \"JUP\" (not $JUP)\n  \"address\": \"SOLANA_ADDRESS_IF_FOUND\" // leave empty if not found\n}\n\nRules:\n- Token symbols are usually prefixed with $ (e.g., $JUP, $BONK)\n- Solana addresses are base58 encoded and 32-44 characters long\n- If no valid token is found, return null for both fields\n- Remove the $ prefix from symbols in the response\n- Only include the first token found`;\n\n      const result = await generateObjectDeprecated({\n        context: prompt,\n        modelClass: ModelClass.LARGE,\n        runtime: this.runtime,\n      });\n\n      try {\n        const parsed = result;\n        return parsed?.symbol || parsed?.address;\n      } catch (e) {\n        elizaLogger.error(\"Failed to parse LLM response:\", result);\n      }\n    } catch (error) {\n      elizaLogger.error(\"Error extracting coin identifier:\", error);\n    }\n\n    // Fallback to regex if LLM fails\n    const symbolMatch = text.match(/\\$([A-Z]+)/);\n    if (symbolMatch) return symbolMatch[1];\n\n    const addressMatch = text.match(/[1-9A-HJ-NP-Za-km-z]{32,44}/);\n    return addressMatch ? addressMatch[0] : null;\n  }\n\n  /**\n   * Get token metrics from Birdeye\n   * @param tokenIdentifier - Token symbol or address\n   */\n  async getTokenMetrics(tokenIdentifier: string): Promise<TokenMetrics> {\n    let address = tokenIdentifier;\n\n    // If the identifier looks like a symbol (not an address), search for it first\n    if (!/^[1-9A-HJ-NP-Za-km-z]{32,44}$/.test(tokenIdentifier)) {\n      const searchResult = await this.searchToken(tokenIdentifier);\n      if (!searchResult.result?.[0]) {\n        throw new Error(`No token found for symbol: ${tokenIdentifier}`);\n      }\n      address = searchResult.result[0].address;\n    }\n\n    const endpoint = `https://public-api.birdeye.so/defi/token_overview?address=${address}`;\n    const response = await fetch(endpoint, {\n      headers: {\n        \"X-API-KEY\": this.apiKey!,\n        Accept: \"application/json\",\n        \"x-chain\": \"solana\",\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.statusText}`);\n    }\n\n    const data = (await response.json()) as BirdeyeApiResponse;\n    if (!data.success) {\n      throw new Error(\"Failed to fetch token metrics\");\n    }\n\n    return data.data;\n  }\n\n  /**\n   * Format data for LLM trust score analysis\n   */\n  createTrustScorePrompt(metrics: TokenMetrics, tweets?: Tweet[]): string {\n    elizaLogger.info(\"Creating trust score prompt\", JSON.stringify(metrics));\n\n    // Process tweets if available\n    let twitterAnalysis = \"\";\n    if (tweets && tweets.length > 0) {\n      const recentTweets = tweets.slice(0, 5); // Take 5 most recent tweets\n      twitterAnalysis = `\\nRecent Twitter Activity:\n${recentTweets.map((tweet, index) => {\n        const tweetDetails = {\n          number: index + 1,\n          url: tweet.permanentUrl,\n          author: `@${tweet.username}`,\n          engagement: `${tweet.likes} likes, ${tweet.retweets} retweets, ${tweet.replies} replies`,\n          views: tweet.views,\n          content: tweet.text.length > 200 \n            ? `${tweet.text.substring(0, 200)}...` \n            : tweet.text\n        };\n\n        return `\nTweet ${tweetDetails.number} (${tweetDetails.url}):\n- Author: ${tweetDetails.author}\n- Engagement: ${tweetDetails.engagement}\n- Views: ${tweetDetails.views}\n- Content: ${tweetDetails.content}\n`;\n      }).join(\"\\n\")}`;\n    }\n    console.log(\"Twitter analysis:\", twitterAnalysis);\n\n    return `You are a cryptocurrency expert analyst. Evaluate trustworthiness based on:\n- Token Name: ${metrics.name} (${metrics.symbol})\n- Current Price: $${metrics.price.toFixed(4)}\n- 24h Price Change: ${metrics.priceChange24hPercent.toFixed(2)}%\n- Market Cap: $${metrics.mc.toLocaleString()} USD\n- Liquidity: $${metrics.liquidity.toLocaleString()} USD\n- Number of Holders: ${metrics.holder.toLocaleString()}\n- 24h Trading Volume: ${\n      metrics.volume24h ? `$${metrics.volume24h.toLocaleString()} USD` : \"N/A\"\n    }\n- 24h Number of Trades: ${metrics.trade24h.toLocaleString()}\n- Available Markets: ${metrics.numberMarkets}\n${\n  metrics.extensions?.description\n    ? `\\nProject Description: ${metrics.extensions.description}`\n    : \"\"\n}\n${metrics.extensions?.website ? `\\nWebsite: ${metrics.extensions.website}` : \"\"}\n${metrics.extensions?.twitter ? `\\nTwitter: ${metrics.extensions.twitter}` : \"\"}\n${\n  metrics.extensions?.telegram\n    ? `\\nTelegram: ${metrics.extensions.telegram}`\n    : \"\"\n}\nHere is the recent twitter activity related to this token:\n${twitterAnalysis}\n\nBased on these metrics and social media activity, provide:\n1. Trust Score (1-10)\n2. Brief analysis of the token's:\n   - Market health (liquidity, trading volume, price action)\n   - Community engagement (holders, social presence, Twitter activity)\n   - Overall risk assessment\n3. Key recommendations for potential investors\n4. Social Media Analysis:\n   - Twitter sentiment and engagement levels (cite specific tweets by their number when relevant)\n   - Quality of discussions and community interaction\n   - Red flags or positive indicators from social activity\n   - Credibility of the accounts discussing the token`;\n  }\n\n  /**\n   * Search for tokens by symbol or name\n   * @param keyword - Token symbol or name to search for\n   * @returns First matching token result\n   */\n  async searchToken(keyword: string): Promise<TokenSearchResult> {\n    console.log(\"Searching for token:\", keyword);\n    const endpoint = `https://public-api.birdeye.so/defi/v3/search?chain=solana&keyword=${encodeURIComponent(\n      keyword\n    )}&target=token&sort_by=volume_24h_usd&sort_type=desc&offset=0&limit=1`;\n    const response = await fetch(endpoint, {\n      headers: {\n        \"X-API-KEY\": this.apiKey!,\n        Accept: \"application/json\",\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Search API request failed: ${response.statusText}`);\n    }\n\n    const data = (await response.json()) as SearchApiResponse;\n    if (!data.success || !data.data?.items?.[0]) {\n      throw new Error(\"Failed to search for token\");\n    }\n\n    return data.data.items[0];\n  }\n}\n\n/**\n * TwitterScrapperService\n * Service for scraping Twitter data\n */\nexport class TwitterScrapperService extends Service {\n  static readonly serviceType: ServiceType = \"twitter-scrapper\" as ServiceType;\n  private runtime: IAgentRuntime | null = null;\n  private scraper: Scraper | null = null;\n\n  constructor() {\n    super();\n  }\n\n  private async getCachedCookies(username: string): Promise<any[] | null> {\n    try {\n      return await this.runtime?.cacheManager.get(\n        `twitter/${username}/cookies`\n      );\n    } catch (error) {\n      elizaLogger.error(\"TWITTER_SCRAPPER\", \"Error getting cached cookies\", {\n        error,\n      });\n      return null;\n    }\n  }\n\n  private async cacheCookies(username: string, cookies: any[]): Promise<void> {\n    try {\n      await this.runtime?.cacheManager.set(\n        `twitter/${username}/cookies`,\n        cookies\n      );\n      elizaLogger.debug(\"TWITTER_SCRAPPER\", \"Cached cookies for Twitter\");\n    } catch (error) {\n      elizaLogger.error(\"TWITTER_SCRAPPER\", \"Error caching cookies\", { error });\n    }\n  }\n\n  private async setCookiesFromArray(\n    scraper: Scraper,\n    cookiesArray: any[]\n  ): Promise<void> {\n    const cookieStrings = cookiesArray.map(\n      (cookie) =>\n        `${cookie.key}=${cookie.value}; Domain=${cookie.domain}; Path=${\n          cookie.path\n        }; ${cookie.secure ? \"Secure\" : \"\"}; ${\n          cookie.httpOnly ? \"HttpOnly\" : \"\"\n        }; SameSite=${cookie.sameSite || \"Lax\"}`\n    );\n    await scraper.setCookies(cookieStrings);\n  }\n\n  async initialize(runtime: IAgentRuntime): Promise<void> {\n    this.runtime = runtime;\n    const username = runtime.getSetting(\"TWITTER_USERNAME\");\n    const password = runtime.getSetting(\"TWITTER_PASSWORD\");\n    const email = runtime.getSetting(\"TWITTER_EMAIL\");\n    const twitter2faSecret = runtime.getSetting(\"TWITTER_2FA_SECRET\");\n\n    if (!username) {\n      throw new Error(\"Twitter username not configured\");\n    }\n\n    const scraper = new Scraper();\n    this.scraper = scraper;\n\n    try {\n      // Try to use cached cookies first\n      const cachedCookies = await this.getCachedCookies(username);\n\n      if (cachedCookies) {\n        elizaLogger.info(\"TWITTER_SCRAPPER\", \"Using cached cookies\");\n        await this.setCookiesFromArray(scraper, cachedCookies);\n\n        // Verify if cookies are still valid\n        if (await scraper.isLoggedIn()) {\n          elizaLogger.success(\n            \"TWITTER_SCRAPPER\",\n            \"Successfully logged in using cached cookies\"\n          );\n          return;\n        }\n        elizaLogger.warn(\n          \"TWITTER_SCRAPPER\",\n          \"Cached cookies expired, proceeding with login\"\n        );\n      }\n\n      // If no cached cookies or they're invalid, proceed with login\n      await scraper.login(username, password, email, twitter2faSecret);\n      elizaLogger.success(\n        \"TWITTER_SCRAPPER\",\n        \"Successfully logged in to Twitter\"\n      );\n\n      // Cache the new cookies\n      const newCookies = await scraper.getCookies();\n      await this.cacheCookies(username, newCookies);\n    } catch (error) {\n      elizaLogger.error(\n        \"TWITTER_SCRAPPER\",\n        \"Failed to initialize Twitter scraper\",\n        { error }\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch tweets related to a token\n   * @param address - Token address\n   * @returns Array of tweets or empty array if scraping fails\n   */\n  async fetchTokenTweets(address: string): Promise<Tweet[]> {\n    if (!this.scraper) {\n      elizaLogger.warn(\n        \"Twitter scraper not initialized - missing credentials or failed initialization\"\n      );\n      return [];\n    }\n\n    try {\n      elizaLogger.info(\"Fetching tweets for address >>>>\", address);\n      const response = await this.scraper.fetchSearchTweets(\n        address,\n        20,\n        SearchMode.Top\n      );\n      elizaLogger.info(\"Fetched tweets XXXX\", response.tweets);\n      elizaLogger.info(\n        `Fetched ${response.tweets.length} tweets for address ${address}`\n      );\n      return response.tweets;\n    } catch (error) {\n      elizaLogger.error(\"Error fetching tweets:\", error);\n      return [];\n    }\n  }\n}\n","import {\n  Action,\n  IAgentRuntime,\n  Memory,\n  State,\n  ServiceType,\n  generateObjectDeprecated,\n  ModelClass,\n  elizaLogger,\n  generateText,\n} from \"@elizaos/core\";\nimport { BirdeyeService, TwitterScrapperService } from \"./services\";\n\n/**\n * SCAN_COIN Action\n * Analyzes Solana-based coins and provides trust scores and metrics\n *\n * Features:\n * - Fetches trust scores from Birdeye API\n * - Analyzes trading volume and patterns\n * - Provides safety recommendations\n * - Checks contract verification status\n * - Analyzes Twitter sentiment and engagement\n */\nconst scanCoinAction: Action = {\n  name: \"SCAN_COIN\",\n  similes: [\n    \"SCAN_ADDRESS\",\n    \"GET_COIN_INFO\",\n    \"GET_ADDRESS_INFO\",\n    \"ANALYZE_COIN\",\n    \"ANALYZE_ADDRESS\",\n    \"SCAN_TOKEN\",\n    \"GET_TOKEN_INFO\",\n    \"ANALYZE_TOKEN\",\n    \"GET_TOKEN_ANALYSIS\",\n    \"GET_TOKEN_METRICS\",\n    \"GET_TOKEN_TWEETS\",\n    \"GET_TOKEN_TRUST_SCORE\",\n    \"GET_TOKEN_RISK_SCORE\",\n    \"GET_TOKEN_SAFETY_SCORE\",\n    \"TELL_ME_ABOUT_TOKEN\",\n    \"TELL_ME_ABOUT_COIN\",\n    \"WHAT_DO_YOU_KNOW_ABOUT_TOKEN\",\n    \"WHAT_DO_YOU_KNOW_ABOUT_COIN\",\n    \"IS_TOKEN_SAFE\",\n    \"IS_COIN_SAFE\",\n    \"CHECK_TOKEN_SAFETY\",\n    \"CHECK_COIN_SAFETY\",\n    \"TOKEN_INFORMATION\",\n    \"COIN_INFORMATION\",\n    \"CHECK_ADDRESS\",\n    \"ANALYZE_THIS_ADDRESS\",\n    \"WHAT_IS_THIS_ADDRESS\",\n  ],\n  description:\n    \"Analyzes and provides information about Solana coins/tokens including trust scores, safety metrics, and market analysis. This action triggers when users ask about specific tokens using $ symbol (like $JUP, $WIF) or when they provide a Solana token address (like 'So11111111111111111111111111111111111111112'). It handles natural queries like 'What can you tell me about $TOKEN?', 'Is this coin safe?', or 'Can you check this address: So1...'\",\n\n  validate: async (\n    runtime: IAgentRuntime,\n    message: Memory\n  ): Promise<boolean> => {\n    return true;\n  },\n  suppressInitialMessage:true,\n  handler: async (\n    runtime,\n    message,\n    _state,\n    _options,\n    callback\n  ): Promise<boolean> => {\n    try {\n      elizaLogger.info(\"Scanning coin\");\n      const birdeye = runtime.getService<BirdeyeService>(\"birdeye\");\n      const twitterScrapper = runtime.getService<TwitterScrapperService>(\"twitter-scrapper\");\n      const text = message.content.text;\n\n      elizaLogger.info(`Text: ${text}`);\n\n      // 1. Extract identifier\n      const identifier = await birdeye.extractCoinIdentifier(text);\n\n      elizaLogger.info(`Identifier: ${identifier}`);\n      if (!identifier) {\n        callback({\n          text: \"No valid coin symbol/address found. Please use format like $JUP or provide a Solana address.\",\n        });\n        return false;\n      }\n\n      const metrics = await birdeye.getTokenMetrics(identifier);\n      elizaLogger.info(`Metrics: ${metrics}`);\n\n      // 2. Fetch Twitter data using the service\n      const tweets = await twitterScrapper.fetchTokenTweets(metrics.address);\n      elizaLogger.info(`Fetched ${tweets.length} tweets`);\n\n      const llmPrompt = birdeye.createTrustScorePrompt(metrics, tweets);\n      elizaLogger.info(`LLM Prompt: ${llmPrompt}`);\n      elizaLogger.info(\n        \"Generating analysis...\"\n      )\n      const analysis = await generateText({\n        context: llmPrompt,\n        modelClass: ModelClass.LARGE,\n        runtime,\n      });\n      elizaLogger.info(`Analysis: ${analysis}`);\n\n      // 5. Send final response\n      if( analysis && callback){\n        await callback({\n          text: `**${metrics.symbol} Analysis**  \n                ${analysis}`,\n        });\n      }\n\n      return true;\n    } catch (error) {\n      console.error(\"Coin scan failed:\", error);\n      callback({\n        text: \"Sorry, I couldn't retrieve the coin data at this time. Please try again later.\",\n      });\n      return false;\n    }\n  },\n  examples: [\n    // Example 1: Basic coin scan\n    [\n      {\n        user: \"{{user1}}\",\n        content: { text: \"Can you scan $JUP and tell me if it's safe?\" },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"I'll analyze Jupiter ($JUP) for you...\",\n          action: \"SCAN_COIN\",\n        },\n      },\n    ],\n    // Example 2: Address scan\n    [\n      {\n        user: \"{{user1}}\",\n        content: { text: \"What's the trust score for this address: So1ara...\" },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"I'll check that Solana address for you...\",\n          action: \"SCAN_COIN\",\n        },\n      },\n    ],\n    // Example 3: Multiple tokens comparison\n    [\n      {\n        user: \"{{user1}}\",\n        content: { text: \"Compare the safety of $BONK and $WIF please\" },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"I'll analyze both BONK and WIF tokens for comparison...\",\n          action: \"SCAN_COIN\",\n        },\n      },\n    ],\n    // Example 4: Detailed analysis request\n    [\n      {\n        user: \"{{user1}}\",\n        content: {\n          text: \"Give me a full analysis of $ORCA including liquidity and trading volume\",\n        },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"I'll perform a comprehensive analysis of ORCA token...\",\n          action: \"SCAN_COIN\",\n        },\n      },\n    ],\n    // Example 5: Quick safety check\n    [\n      {\n        user: \"{{user1}}\",\n        content: { text: \"Is this token safe? $PYTH\" },\n      },\n      {\n        user: \"{{user2}}\",\n        content: {\n          text: \"Let me check the safety metrics for PYTH...\",\n          action: \"SCAN_COIN\",\n        },\n      },\n    ],\n  ],\n};\n\nexport default scanCoinAction;\n","import type { Plugin } from \"@elizaos/core\";\nimport { BirdeyeService, TwitterScrapperService } from \"./services.ts\";\nimport scanCoinAction from \"./actions.ts\";\n\n\nexport const tradingBuddyPlugin: Plugin = {\n    name: \"tradingBuddyPlugin\",\n    description: \"Agent that helps with trading and investing in crypto on the Solana blockchain, get info about coins, addresses, and more\",\n    actions: [\n        scanCoinAction\n    ],\n    evaluators: [],\n    providers: [],\n    services: [new BirdeyeService(), new TwitterScrapperService()],\n};\nexport default tradingBuddyPlugin;"],"mappings":"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","names":["ModelClass","elizaLogger"]}